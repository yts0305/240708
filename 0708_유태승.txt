클래스 this this 생성자
멤버 필드에 변수들이 선언 멤버변수
생성자
각종 관련된 메서드들 Info 메서드 멤버필드에 선언된 변수 데이터
저장 및 수정
소멸자


클래스 상속으로 코드 재활용
상속의 진정한 의미는 코드의 재활용도 있지만
프로젝트가 늘어나거나 확장되는 경우에
상속을 활용해서 코드의 최적화하는 것이 진정한 상속이다.
코드의 재활용과 더불어 확장성이 있어여 함 즉 불필요한 코드를 제거하는 것이다.

 //is : 객체가 해당 형식을 검사하여 그 결과를 bool 값으로 변환
//        //as : 형식변환자 같은 역활을 한다. 다만 형식변환자가 변환에 실패하는 경우
//        // 예외를 던지는 반면 as 연산자는 객체 참조를 null로 만든다는 것이 다름

//중첩 클래스
//클래스 안에 클래스가 들어 있는 것을 중첩 클래스라 한다.
//중첩 클래스를 쓰는 이유
//1. 클래스 위부에 공개하고 싶지 않은 형식을 만들때
//2. 현재 클래스의 일부분 처럼 표현 할 수 있는 클래스를 만들고자 할때

//중첩 클래스는 상위 클래스 맴버에 자유롭게 접근이 가능

	       클래스                		  구조체
키워드           class		    	  struct
형식 	       참조형식(힙)  	   	  값형식(스택 할당)
복사   	       얕은 복사 	    	 	  깊은 복사
인스턴스 생성  new연산자와 생성자 필요	  선언만 필요
생성자           매게변수없는 생성자 선언가능      메게변수없는 생성자 선언 불가능
상속	       가능			  값형식이므로 상속 불가능

목적 : 실제 세계의 객체를 추상화             	목적 : 데이터를 담기 위한 목적의 자료 구조로 쓰이기 위해
하려는 데 존재의 이유이지만 